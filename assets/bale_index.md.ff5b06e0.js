import{o as n,c as s,b as a}from"./app.c212677f.js";const t='{"title":"公司内网部署","description":"","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言"},{"level":2,"title":"前端的 Vue 打包与部署","slug":"前端的-vue-打包与部署"},{"level":3,"title":"构建 vue 应用镜像","slug":"构建-vue-应用镜像"},{"level":3,"title":"创建 nginx config 配置文件","slug":"创建-nginx-config-配置文件"},{"level":3,"title":"创建 Dockerfile 文件","slug":"创建-dockerfile-文件"},{"level":3,"title":"检测 Docker 是否能够正常运行项目","slug":"检测-docker-是否能够正常运行项目"},{"level":3,"title":"[重要]配置可执行的yaml文件","slug":"重要-配置可执行的yaml文件"},{"level":3,"title":"jenkins新的Job","slug":"jenkins新的job"}],"relativePath":"bale/index.md","lastUpdated":1676009954035}',p={},o=a('<h1 id="公司内网部署"><a class="header-anchor" href="#公司内网部署" aria-hidden="true">#</a> 公司内网部署</h1><h2 id="前言"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><blockquote><p>我们依靠<code>docker</code>内网部署,通过<code>jenkins</code>构建工作流</p></blockquote><h2 id="前端的-vue-打包与部署"><a class="header-anchor" href="#前端的-vue-打包与部署" aria-hidden="true">#</a> 前端的 Vue 打包与部署</h2><p>小贴士：<span style="color:red;">前端打包统一采用相对路径,具体在文件<code>vue.config.js</code>进行如下配置:</span></p><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 打包为相对路径</span>\n  publicPath<span class="token operator">:</span> <span class="token string">&quot;./&quot;</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 将构建好的文件输出到哪里</span>\n  outputDir<span class="token operator">:</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 放置生成的静态资源(js、css、img、fonts)的目录。</span>\n  assetsDir<span class="token operator">:</span> <span class="token string">&quot;static&quot;</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 指定生成的 index.html 的输出路径</span>\n  indexPath<span class="token operator">:</span> <span class="token string">&quot;index.html&quot;</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 是否使用包含运行时编译器的 Vue 构建版本。设置为 true 后你就可以在 Vue 组件中使用 template 选项了，但是这会让你的应用额外增加 10kb 左右。</span>\n  runtimeCompiler<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 默认情况下 babel-loader 会忽略所有 node_modules 中的文件。如果你想要通过 Babel 显式转译一个依赖，可以在这个选项中列出来。</span>\n  transpileDependencies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 生产环境关闭 source map</span>\n  productionSourceMap<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="构建-vue-应用镜像"><a class="header-anchor" href="#构建-vue-应用镜像" aria-hidden="true">#</a> 构建 vue 应用镜像</h3><blockquote><p>nginx 是一个高性能的 HTTP 和反向代理服务器，此处我们选用 nginx 镜像作为基础来构建我们的 vue 应用镜像。</p></blockquote><h3 id="创建-nginx-config-配置文件"><a class="header-anchor" href="#创建-nginx-config-配置文件" aria-hidden="true">#</a> 创建 nginx config 配置文件</h3><p><img src="https://files.catbox.moe/lya17n.png" alt=""></p><ul><li>1.我们在根目录下创建<code>conf</code>文件夹</li><li>2.新建<code>default.conf</code>和<code>nginx.conf</code></li></ul><blockquote><p><code>default.conf</code>文件:</p></blockquote><div class="tip custom-block"><p class="custom-block-title">说明</p><div class="language-bash"><pre><code>location /api/ <span class="token punctuation">{</span>\n    \t\tproxy_pass http://watone-gateway:3204/<span class="token punctuation">;</span>\n    \t<span class="token punctuation">}</span>\n</code></pre></div><p><span style="color:red;">需要根据配置的后端地址改变而改变,访问不到的话会导致报错</span></p></div><div class="language-bash"><pre><code>server <span class="token punctuation">{</span>\n    listen       <span class="token number">3000</span><span class="token punctuation">;</span>\n    server_name  localhost<span class="token punctuation">;</span>\n    <span class="token comment">#charset koi8-r;</span>\n    <span class="token comment">#access_log  /var/log/nginx/host.access.log  main;</span>\n    <span class="token comment">#error_log  /var/log/nginx/host.error.log;</span>\n    location / <span class="token punctuation">{</span>\n        add_header X-Frame-Options SAMEORIGIN<span class="token punctuation">;</span>\n        add_header Access-Control-Allow-Origin *<span class="token punctuation">;</span>\n        add_header Access-Control-Allow-Methods GET,POST,OPTIONS<span class="token punctuation">;</span>\n        add_header Access-Control-Allow-Credentials <span class="token boolean">true</span><span class="token punctuation">;</span>\n        add_header Access-Control-Allow-Headers X-Requested-With<span class="token punctuation">;</span>\n         <span class="token comment"># disable cache html</span>\n        root   /usr/share/nginx/html<span class="token punctuation">;</span>\n        index  index.html index.htm index.shtml<span class="token punctuation">;</span>\n        try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html<span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n\n    location /api/ <span class="token punctuation">{</span>\n    \t\tproxy_pass http://watone-gateway:3204/<span class="token punctuation">;</span>\n    \t<span class="token punctuation">}</span>\n    <span class="token comment">#error_page  404              /404.html;</span>\n\n    <span class="token comment"># redirect server error pages to the static page /50x.html</span>\n    <span class="token comment">#</span>\n    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>\n    location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>\n        root   /usr/share/nginx/html<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment"># deny access to .htaccess files, if Apache&#39;s document root</span>\n    <span class="token comment"># concurs with nginx&#39;s one</span>\n    <span class="token comment">#</span>\n    <span class="token comment">#location ~ /\\.ht {</span>\n    <span class="token comment">#    deny  all;</span>\n    <span class="token comment">#}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p><code>nginx.conf</code>文件:</p></blockquote><div class="language-bash"><pre><code>user  nginx<span class="token punctuation">;</span>\nworker_processes  auto<span class="token punctuation">;</span>\n\nerror_log  /var/log/nginx/error.log warn<span class="token punctuation">;</span>\npid        /var/run/nginx.pid<span class="token punctuation">;</span>\n\nevents <span class="token punctuation">{</span>\n    use epoll<span class="token punctuation">;</span>\n    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nhttp <span class="token punctuation">{</span>\n    include       /etc/nginx/mime.types<span class="token punctuation">;</span>\n    default_type  application/octet-stream<span class="token punctuation">;</span>\n\n    log_format  main  <span class="token string">&#39;<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local</span>] &quot;<span class="token variable">$request</span>&quot; &#39;</span>\n                      <span class="token string">&#39;<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> &quot;<span class="token variable">$http_referer</span>&quot; &#39;</span>\n                      <span class="token string">&#39;&quot;<span class="token variable">$http_user_agent</span>&quot; &quot;<span class="token variable">$http_x_forwarded_for</span>&quot;&#39;</span><span class="token punctuation">;</span>\n    <span class="token comment">#access_log  /var/log/nginx/access.log  main;</span>\n\n    sendfile       on<span class="token punctuation">;</span>\n    tcp_nopush     on<span class="token punctuation">;</span>\n    tcp_nodelay    on<span class="token punctuation">;</span>\n    client_header_timeout <span class="token number">15</span><span class="token punctuation">;</span>\n    client_body_timeout <span class="token number">15</span><span class="token punctuation">;</span>\n    send_timeout <span class="token number">15</span><span class="token punctuation">;</span>\n    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>\n\n    client_max_body_size 300m<span class="token punctuation">;</span>\n\n    <span class="token function">gzip</span>  on<span class="token punctuation">;</span>\n    gzip_min_length 1k<span class="token punctuation">;</span>\n    gzip_buffers <span class="token number">4</span> 16k<span class="token punctuation">;</span>\n    gzip_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>\n    gzip_comp_level <span class="token number">6</span><span class="token punctuation">;</span>\n    gzip_types text/plain application/javascript application/x-javascript\ntext/javascript text/css application/xml<span class="token punctuation">;</span>\n    gzip_vary on<span class="token punctuation">;</span>\n    include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="创建-dockerfile-文件"><a class="header-anchor" href="#创建-dockerfile-文件" aria-hidden="true">#</a> 创建 Dockerfile 文件</h3><blockquote><p>在项目外层新建<code>dockerfile</code>文件:</p></blockquote><div class="language-bash"><pre><code><span class="token comment"># Citybrain nginx Dockerfile</span>\n<span class="token comment"># Version 1.0</span>\n<span class="token comment"># Base images 基础镜像</span>\nFROM nginx:1.16.0-alpine\n<span class="token comment">#LABEL 维护者信息</span>\nLABEL caosx caosx@watone.com.cn\n<span class="token comment">#COPY</span>\nCOPY ./dist/ /usr/share/nginx/html/\nCOPY ./conf/nginx.conf /etc/nginx/nginx.conf\nCOPY ./conf/default.conf /etc/nginx/conf.d/default.conf\n<span class="token comment">#RUN 赋予权限</span>\nRUN <span class="token function">chown</span> -R nginx. /usr/share/nginx\n<span class="token comment">#EXPOSE 映射端口</span>\nEXPOSE <span class="token number">8000</span>\n<span class="token comment">#ENTRYPOINT 运行以下命令</span>\nENTRYPOINT <span class="token punctuation">[</span><span class="token string">&quot;nginx&quot;</span>, <span class="token string">&quot;-g&quot;</span>, <span class="token string">&quot;daemon off;&quot;</span><span class="token punctuation">]</span>\n</code></pre></div><h3 id="检测-docker-是否能够正常运行项目"><a class="header-anchor" href="#检测-docker-是否能够正常运行项目" aria-hidden="true">#</a> 检测 Docker 是否能够正常运行项目</h3><ul><li>在根目录新建<code>run.sh</code>文件:</li></ul><div class="language-bash"><pre><code><span class="token shebang important">#!/bin/bash</span>\n<span class="token comment"># 这里以watone-jw-h5项目为例</span>\n<span class="token assign-left variable">ENVIRONMENT</span><span class="token operator">=</span><span class="token string">&#39;watone-jw-h5&#39;</span>\n\ndocker build <span class="token builtin class-name">.</span> -t <span class="token variable">${ENVIRONMENT}</span>\ndocker run --rm -it  -p <span class="token number">9527</span>:80/tcp <span class="token variable">${ENVIRONMENT}</span>:latest\n</code></pre></div><ul><li>运行脚本</li></ul><div class="language-bash"><pre><code><span class="token function">sh</span> run.sh\n</code></pre></div><ul><li>打开链接 <blockquote><p><a href="http://localhost:9527/#/" target="_blank" rel="noopener noreferrer">http://localhost:9527/#/</a></p></blockquote></li></ul><p><span style="color:green;">能够顺利打开证明 Docker 能够正常运行项目</span></p><h3 id="重要-配置可执行的yaml文件"><a class="header-anchor" href="#重要-配置可执行的yaml文件" aria-hidden="true">#</a> [重要]配置可执行的<code>yaml</code>文件</h3><div class="danger custom-block"><p class="custom-block-title">重要</p><p>配置运行脚本,关系重大,务必检查仔细,包括端口,项目名称,避免冲突其他服务和端口</p></div><blockquote><p>以下均以<code>watone-jw-web</code>项目为例</p></blockquote><ul><li>在根目录新建<code>watone-jw-web-deployment.yaml</code>文件:</li></ul><div class="language-bash"><pre><code>---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: watone-jw-web\n  namespace: lajw\n  labels:\n    web: watone-jw-web\nspec:\n  replicas: <span class="token number">3</span>\n  selector:\n    matchLabels:\n      web: watone-jw-web\n  template:\n    metadata:\n      labels:\n        web: watone-jw-web\n    spec:\n      nodeSelector:\n        role2: worker\n      imagePullSecrets:\n        - name: image\n      containers:\n        - name: watone-jw-web\n          image: reg.watone.local/lajw/watone-jw-web:latest\n          imagePullPolicy: <span class="token string">&quot;Always&quot;</span>\n          ports:\n            - containerPort: <span class="token number">3000</span>\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: watone-jw-web\n  namespace: lajw\n  labels:\n    web: watone-jw-web\nspec:\n  type: NodePort\n  ports:\n    - name: watone-jw-web\n      port: <span class="token number">3000</span>\n      targetPort: <span class="token number">3000</span>\n      nodePort: <span class="token number">33000</span>\n  selector:\n    web: watone-jw-web\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意 ⚠️ 事项</p><p style="color:red;">1.需要改动文件名称加`XXX-deployment.yaml`</p><p style="color:red;">2.以上`watone-jw-web`内容需要修改为自己项目名称`XXX`</p><p style="color:red;">3.如果不需要太多部署备份服务`replicas: 3`可以改为`replicas: 1`</p><p style="color:red;">4.`33000`端口是基础端口,看需要增加新的端口,➕1或➕2者往后加,后端服务一般在200之后,不太清楚的话,咨询其他人</p></div><h3 id="jenkins新的job"><a class="header-anchor" href="#jenkins新的job" aria-hidden="true">#</a> <code>jenkins</code>新的<code>Job</code></h3><ul><li>新建<code>jenkinsfile</code>文件,把 URL 改为本项目 URL</li></ul><div class="language-js"><pre><code>pipeline <span class="token punctuation">{</span>\n\tagent any\n  <span class="token comment">// agent {</span>\n  <span class="token comment">// \tdocker {</span>\n  <span class="token comment">// \t\timage &#39;reg.watone.local/library/yarn:v1.22.4&#39;</span>\n  <span class="token comment">// \t\targs &#39;-v /usr/bin/docker:/usr/bin/docker -v /var/run/docker.sock:/var/run/docker.sock&#39;</span>\n  <span class="token comment">// \t}</span>\n  <span class="token comment">// }</span>\n\n  stages <span class="token punctuation">{</span>\n    <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Git Checkout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        steps <span class="token punctuation">{</span>\n            <span class="token function">checkout</span><span class="token punctuation">(</span><span class="token punctuation">[</span>$<span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;GitSCM&#39;</span><span class="token punctuation">,</span> branches<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>name<span class="token operator">:</span> <span class="token string">&quot;$BRANCHES&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> doGenerateSubmoduleConfigurations<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> submoduleCfg<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> userRemoteConfigs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>credentialsId<span class="token operator">:</span> <span class="token string">&#39;df5d99a0-9b4f-4ac1-aaaa-6e0865e0cd67&#39;</span><span class="token punctuation">,</span> url<span class="token operator">:</span> <span class="token string">&#39;git@47.111.5.200:la-jw/watone-jw-web.git&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Yarn Build&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// agent { docker &#39;reg.watone.local/library/yarn:v1.22.4&#39; }</span>\n        steps <span class="token punctuation">{</span>\n            sh <span class="token string">&#39;&#39;</span>&#39;\n            yarn install\n            yarn build\n            <span class="token string">&#39;&#39;</span>&#39;\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;docker push&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        steps <span class="token punctuation">{</span>\n          script <span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">PROFILES</span> <span class="token operator">==</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n              sh <span class="token string">&#39;&#39;</span>&#39;\n              echo <span class="token string">&quot;构建并推送镜像到: ${REGISTRY} 仓库！！！&quot;</span>\n              docker login <span class="token operator">-</span>u $<span class="token punctuation">{</span><span class="token constant">ACCOUNT</span><span class="token punctuation">}</span> <span class="token operator">-</span>p $<span class="token punctuation">{</span><span class="token constant">PASSWD</span><span class="token punctuation">}</span> $<span class="token punctuation">{</span><span class="token constant">REGISTRY</span><span class="token punctuation">}</span>\n              docker build <span class="token operator">-</span>t $<span class="token punctuation">{</span><span class="token constant">REGISTRY</span><span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span><span class="token constant">PROJECT_NAME</span><span class="token punctuation">}</span><span class="token operator">-</span>pre<span class="token operator">/</span>$<span class="token punctuation">{</span><span class="token constant">IMAGE_NAME</span><span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span><span class="token constant">VERSION</span><span class="token punctuation">}</span> <span class="token operator">-</span>f dockerfile <span class="token punctuation">.</span>\n              docker push $<span class="token punctuation">{</span><span class="token constant">REGISTRY</span><span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span><span class="token constant">PROJECT_NAME</span><span class="token punctuation">}</span><span class="token operator">-</span>pre<span class="token operator">/</span>$<span class="token punctuation">{</span><span class="token constant">IMAGE_NAME</span><span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span><span class="token constant">VERSION</span><span class="token punctuation">}</span>\n              sleep <span class="token number">3</span>\n              docker rmi $<span class="token punctuation">{</span><span class="token constant">REGISTRY</span><span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span><span class="token constant">PROJECT_NAME</span><span class="token punctuation">}</span><span class="token operator">-</span>pre<span class="token operator">/</span>$<span class="token punctuation">{</span><span class="token constant">IMAGE_NAME</span><span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span><span class="token constant">VERSION</span><span class="token punctuation">}</span>\n              <span class="token string">&#39;&#39;</span>&#39;\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">PROFILES</span> <span class="token operator">==</span> <span class="token string">&#39;prod&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n              sh <span class="token string">&#39;&#39;</span>&#39;\n              echo <span class="token string">&quot;构建并推送镜像到: ${REGISTRY} 仓库！！！&quot;</span>\n              docker login <span class="token operator">-</span>u $<span class="token punctuation">{</span><span class="token constant">ACCOUNT</span><span class="token punctuation">}</span> <span class="token operator">-</span>p $<span class="token punctuation">{</span><span class="token constant">PASSWD</span><span class="token punctuation">}</span> $<span class="token punctuation">{</span><span class="token constant">REGISTRY</span><span class="token punctuation">}</span>\n              docker build <span class="token operator">-</span>t $<span class="token punctuation">{</span><span class="token constant">REGISTRY</span><span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span><span class="token constant">PROJECT_NAME</span><span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span><span class="token constant">IMAGE_NAME</span><span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span><span class="token constant">VERSION</span><span class="token punctuation">}</span> <span class="token operator">-</span>f dockerfile <span class="token punctuation">.</span>\n              docker push $<span class="token punctuation">{</span><span class="token constant">REGISTRY</span><span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span><span class="token constant">PROJECT_NAME</span><span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span><span class="token constant">IMAGE_NAME</span><span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span><span class="token constant">VERSION</span><span class="token punctuation">}</span>\n              sleep <span class="token number">3</span>\n              docker rmi $<span class="token punctuation">{</span><span class="token constant">REGISTRY</span><span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span><span class="token constant">PROJECT_NAME</span><span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span><span class="token constant">IMAGE_NAME</span><span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span><span class="token constant">VERSION</span><span class="token punctuation">}</span>\n              <span class="token string">&#39;&#39;</span>&#39;\n            <span class="token punctuation">}</span>\n           <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Deploy to k8s&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        steps <span class="token punctuation">{</span>\n            script <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">PROFILES</span> <span class="token operator">==</span> <span class="token string">&#39;prod&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    echo <span class="token string">&#39;接下来进行生产项目的发布...&#39;</span>\n                    sh <span class="token string">&#39;&#39;</span>&#39;\n                    sed <span class="token operator">-</span>i <span class="token string">&quot;/image/{s/latest/${VERSION}/}&quot;</span>  $<span class="token punctuation">{</span><span class="token constant">DEPLOYMENT</span><span class="token punctuation">}</span>\n                    sshpass scp $<span class="token punctuation">{</span><span class="token constant">DEPLOYMENT</span><span class="token punctuation">}</span> root@<span class="token number">172.18</span><span class="token number">.39</span><span class="token number">.191</span><span class="token operator">:</span><span class="token operator">/</span>root<span class="token operator">/</span>caosx<span class="token operator">/</span>yml\n                    sshpass ssh root@<span class="token number">172.18</span><span class="token number">.39</span><span class="token number">.191</span> <span class="token string">&quot;kubectl apply -f /root/caosx/yml/${DEPLOYMENT}&quot;</span>\n                    <span class="token string">&#39;&#39;</span>&#39;\n                    <span class="token comment">// kubernetesDeploy configs: &#39;watone-jw-web-deployment.yaml&#39;, kubeConfig: [path: &#39;&#39;], kubeconfigId: &#39;3ab9d4b4-ffb9-44af-ab49-c17b64161198&#39;, secretName: &#39;&#39;, ssh: [sshCredentialsId: &#39;*&#39;, sshServer: &#39;&#39;], textCredentials: [certificateAuthorityData: &#39;&#39;, clientCertificateData: &#39;&#39;, clientKeyData: &#39;&#39;, serverUrl: &#39;https://&#39;]</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token comment">// if ( PROFILES == &#39;test&#39; ) {</span>\n                <span class="token comment">//     echo &#39;接下来进行测试项目的发布...&#39;</span>\n                <span class="token comment">//     sh &#39;&#39;&#39;</span>\n                <span class="token comment">//     sed -i &quot;/image/{s/latest/${VERSION}/}&quot;  deploy.yaml</span>\n                <span class="token comment">//     &#39;&#39;&#39;</span>\n                <span class="token comment">//     kubernetesDeploy configs: &#39;deploy.yaml&#39;, kubeConfig: [path: &#39;&#39;], kubeconfigId: &#39;3ab9d4b4-ffb9-44af-ab49-c17b64161198&#39;, secretName: &#39;&#39;, ssh: [sshCredentialsId: &#39;*&#39;, sshServer: &#39;&#39;], textCredentials: [certificateAuthorityData: &#39;&#39;, clientCertificateData: &#39;&#39;, clientKeyData: &#39;&#39;, serverUrl: &#39;https://&#39;]</span>\n                <span class="token comment">// }</span>\n\n                <span class="token comment">// if ( PROFILES == &#39;pre&#39; ) {</span>\n                <span class="token comment">//     echo &#39;接下来进行预发项目的发布...&#39;</span>\n                <span class="token comment">//     sh &#39;&#39;&#39;</span>\n                <span class="token comment">//     sed -i &quot;/image/{s/latest/${VERSION}/}&quot;  deploy.yaml</span>\n                <span class="token comment">//     &#39;&#39;&#39;</span>\n                <span class="token comment">//     kubernetesDeploy configs: &#39;deploy.yaml&#39;, kubeConfig: [path: &#39;&#39;], kubeconfigId: &#39;3ab9d4b4-ffb9-44af-ab49-c17b64161198&#39;, secretName: &#39;&#39;, ssh: [sshCredentialsId: &#39;*&#39;, sshServer: &#39;&#39;], textCredentials: [certificateAuthorityData: &#39;&#39;, clientCertificateData: &#39;&#39;, clientKeyData: &#39;&#39;, serverUrl: &#39;https://&#39;]</span>\n                <span class="token comment">// }</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token constant">PROFILES</span> <span class="token operator">==</span> <span class="token string">&#39;pre&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                   echo <span class="token string">&#39;接下来进行预发项目的发布...&#39;</span>\n                   sh <span class="token string">&#39;&#39;</span>&#39;\n                   sed <span class="token operator">-</span>i <span class="token string">&quot;/image/{s/latest/${VERSION}/}&quot;</span>  $<span class="token punctuation">{</span><span class="token constant">DEPLOYMENT</span><span class="token punctuation">}</span>\n                   sed <span class="token operator">-</span>i <span class="token string">&quot;/image/{s/${PROJECT_NAME}/${PROJECT_NAME}-pre/}&quot;</span>  $<span class="token punctuation">{</span><span class="token constant">DEPLOYMENT</span><span class="token punctuation">}</span>\n                   sed <span class="token operator">-</span>i <span class="token string">&quot;/profiles/{s/profiles/${PROFILES}/}&quot;</span>  $<span class="token punctuation">{</span><span class="token constant">DEPLOYMENT</span><span class="token punctuation">}</span>\n                   sshpass scp $<span class="token punctuation">{</span><span class="token constant">DEPLOYMENT</span><span class="token punctuation">}</span> root@<span class="token number">172.18</span><span class="token number">.19</span><span class="token number">.216</span><span class="token operator">:</span><span class="token operator">/</span>root<span class="token operator">/</span>caosx<span class="token operator">/</span>yml\n                   sshpass ssh root@<span class="token number">172.18</span><span class="token number">.19</span><span class="token number">.216</span> <span class="token string">&quot;kubectl apply -f /root/caosx/yml/${DEPLOYMENT}&quot;</span>\n                   <span class="token string">&#39;&#39;</span>&#39;\n              <span class="token comment">//     kubernetesDeploy configs: &#39;deploy.yaml&#39;, kubeConfig: [path: &#39;&#39;], kubeconfigId: &#39;3ab9d4b4-ffb9-44af-ab49-c17b64161198&#39;, secretName: &#39;&#39;, ssh: [sshCredentialsId: &#39;*&#39;, sshServer: &#39;&#39;], textCredentials: [certificateAuthorityData: &#39;&#39;, clientCertificateData: &#39;&#39;, clientKeyData: &#39;&#39;, serverUrl: &#39;https://&#39;]</span>\n               <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">stage</span> <span class="token punctuation">(</span><span class="token string">&#39;Post-Build&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        steps <span class="token punctuation">{</span>\n            script <span class="token punctuation">{</span>\n                currentBuild<span class="token punctuation">.</span>description <span class="token operator">=</span> <span class="token string">&quot;${VERSION}&quot;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><p><img src="https://files.catbox.moe/tyvrs3.png" alt=""></p><blockquote><p>命名一般采用:测试化境-项目名称+test,正式环境-项目名称</p></blockquote><ul><li>复制一个<code>job</code>从<code>watone-jw-web</code>,指定一个分支</li></ul><p><img src="https://files.catbox.moe/rxb4z4.png" alt=""></p><ul><li>点击保存,大功告成</li></ul>',40);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
