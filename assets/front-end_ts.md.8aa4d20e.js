import{o as s,c as n,b as a}from"./app.c212677f.js";const p='{"title":"TypeScript","description":"","frontmatter":{"sidebarDepth":3},"headers":[{"level":2,"title":"如何编译ts文件","slug":"如何编译ts文件"},{"level":3,"title":"ts-node","slug":"ts-node"},{"level":3,"title":"tsc","slug":"tsc"},{"level":2,"title":"如何调试ts文件","slug":"如何调试ts文件"},{"level":2,"title":"TypeScript 知识点收集","slug":"typescript-知识点收集"},{"level":3,"title":"泛型","slug":"泛型"}],"relativePath":"front-end/ts.md","lastUpdated":1674009752349}',t={},o=a('<h1 id="typescript"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h1><p>TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程</p><h2 id="如何编译ts文件"><a class="header-anchor" href="#如何编译ts文件" aria-hidden="true">#</a> 如何编译ts文件</h2><p>我们可以直接使用ts-node来执行ts文件，或者使用tsc来将ts文件编译成js文件后在执行</p><h3 id="ts-node"><a class="header-anchor" href="#ts-node" aria-hidden="true">#</a> ts-node</h3><div class="language-bash"><pre><code>$ <span class="token function">npm</span> i -g ts-node\n$ <span class="token function">npm</span> <span class="token function">install</span> -g typescript\n$ ts-node foo.ts\n</code></pre></div><h3 id="tsc"><a class="header-anchor" href="#tsc" aria-hidden="true">#</a> tsc</h3><div class="language-bash"><pre><code>$ <span class="token function">npm</span> i --save-dev typescript\n$ npx tsc -p ./tsconfig.json\n</code></pre></div><h2 id="如何调试ts文件"><a class="header-anchor" href="#如何调试ts文件" aria-hidden="true">#</a> 如何调试ts文件</h2><p>本章介绍使用如何vscode来调试ts文件</p><div class="language-json"><pre><code><span class="token comment">// launch.json</span>\n<span class="token punctuation">{</span>\n    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Current TS File&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;${workspaceRoot}/node_modules/ts-node/dist/bin.js&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n                <span class="token string">&quot;${relativeFile}&quot;</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;cwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;${workspaceRoot}&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;protocol&quot;</span><span class="token operator">:</span> <span class="token string">&quot;inspector&quot;</span><span class="token punctuation">,</span>\n            <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;TS_NODE_PROJECT&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsconfig.base.json&quot;</span> <span class="token punctuation">}</span> <span class="token comment">// 使用该环境变量指定具体的tsconfig文件，默认为tsconfig.json</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><h2 id="typescript-知识点收集"><a class="header-anchor" href="#typescript-知识点收集" aria-hidden="true">#</a> TypeScript 知识点收集</h2><p>本章介绍一些编写TS代码中比较重要的知识点</p><h3 id="泛型"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h3><p>个人简单理解泛型就是让我们可以像函数一样接收一个参数来动态的设置类型，本节收集整理在泛型的使用过程中的一些高级用法</p><h4 id="泛型约束"><a class="header-anchor" href="#泛型约束" aria-hidden="true">#</a> 泛型约束</h4><p>使得Foo类型传入的对象必须包含在接口Initial的属性之中</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Initial</span> <span class="token punctuation">{</span>\n    foo<span class="token operator">:</span><span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Foo <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Initial<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Bar</span> <span class="token operator">=</span> Foo<span class="token operator">&lt;</span><span class="token punctuation">{</span>foo<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="参数扩展"><a class="header-anchor" href="#参数扩展" aria-hidden="true">#</a> 参数扩展</h4><p>通过此方式，我们可以设置一些默认的接口参数，然后通过泛型的方式，来让调用者可以扩展默认的接口</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Initial</span> <span class="token punctuation">{</span>\n    foo<span class="token operator">:</span><span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Foo <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Initial<span class="token punctuation">]</span><span class="token operator">:</span> Initial<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Bar</span> <span class="token operator">=</span> Foo<span class="token operator">&lt;</span><span class="token punctuation">{</span>bar<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n</code></pre></div><h4 id="复合类型转map"><a class="header-anchor" href="#复合类型转map" aria-hidden="true">#</a> 复合类型转Map</h4><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">Union</span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">UnionToMap</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>key <span class="token keyword">in</span> Union<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="map转复合类型"><a class="header-anchor" href="#map转复合类型" aria-hidden="true">#</a> Map转复合类型</h4><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">MyMap</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    foo<span class="token operator">:</span><span class="token builtin">string</span>\n    bar<span class="token operator">:</span><span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">MapToUnion</span> <span class="token operator">=</span> MyMap<span class="token punctuation">[</span><span class="token keyword">keyof</span> MyMap<span class="token punctuation">]</span> <span class="token comment">// string|number</span>\n</code></pre></div><h4 id="类型转换为optional"><a class="header-anchor" href="#类型转换为optional" aria-hidden="true">#</a> 类型转换为Optional</h4><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n    foo<span class="token operator">:</span><span class="token builtin">string</span>\n    bar<span class="token operator">:</span><span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Optional <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">OptionalFoo</span> <span class="token operator">=</span> Optional<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span>\n</code></pre></div><h4 id="类型转换为readonly"><a class="header-anchor" href="#类型转换为readonly" aria-hidden="true">#</a> 类型转换为readonly</h4><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n    foo<span class="token operator">:</span><span class="token builtin">string</span>\n    bar<span class="token operator">:</span><span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Optional <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">OptionalFoo</span> <span class="token operator">=</span> Optional<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span>\n</code></pre></div><h4 id="接收多个参数，union转map"><a class="header-anchor" href="#接收多个参数，union转map" aria-hidden="true">#</a> 接收多个参数，Union转Map</h4><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">Foo<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">O</span><span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Size</span> <span class="token operator">=</span> <span class="token string">&#39;small&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;default&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;big&#39;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">SizeMap</span> <span class="token operator">=</span> Foo<span class="token operator">&lt;</span>Size<span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span>\n\n</code></pre></div><h4 id="递归添加readonly"><a class="header-anchor" href="#递归添加readonly" aria-hidden="true">#</a> 递归添加readonly</h4><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">DeepReadony<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> DeepReadony<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">SomeObject</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> <span class="token punctuation">{</span>\n    b<span class="token operator">:</span> <span class="token punctuation">{</span>\n      c<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> obj<span class="token operator">:</span> DeepReadony<span class="token operator">&lt;</span>SomeObject<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre></div>',33);t.render=function(a,p,t,e,c,l){return s(),n("div",null,[o])};export default t;export{p as __pageData};
