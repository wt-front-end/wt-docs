import{o as n,c as s,b as a}from"./app.c212677f.js";const e='{"title":"Node.js","description":"","frontmatter":{},"headers":[{"level":2,"title":"nvm","slug":"nvm"},{"level":3,"title":"安装nvm","slug":"安装nvm"},{"level":3,"title":"添加环境变量","slug":"添加环境变量"},{"level":3,"title":"使用命令","slug":"使用命令"},{"level":2,"title":"nrm","slug":"nrm"},{"level":3,"title":"安装nrm","slug":"安装nrm"},{"level":3,"title":"使用命令","slug":"使用命令-2"},{"level":2,"title":"实用模块","slug":"实用模块"},{"level":3,"title":"dclone","slug":"dclone"},{"level":3,"title":"http-server","slug":"http-server"},{"level":3,"title":"npx","slug":"npx"},{"level":3,"title":"optimist","slug":"optimist"},{"level":3,"title":"yargs","slug":"yargs"},{"level":3,"title":"cloc","slug":"cloc"},{"level":3,"title":"promisify","slug":"promisify"},{"level":3,"title":"mdv","slug":"mdv"},{"level":2,"title":"使用 npm link 调试模块","slug":"使用-npm-link-调试模块"}],"relativePath":"front-end/node.md","lastUpdated":1673505831519}',t={},p=a('<h1 id="node-js"><a class="header-anchor" href="#node-js" aria-hidden="true">#</a> Node.js</h1><p>本文档将会介绍我们在开发Node.js应用时会用到的一些工具</p><h2 id="nvm"><a class="header-anchor" href="#nvm" aria-hidden="true">#</a> nvm</h2><p>管理Node.js版本，通过<a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener noreferrer">nvm</a>我们可以同时安装/切换不同的Node.js版本</p><h3 id="安装nvm"><a class="header-anchor" href="#安装nvm" aria-hidden="true">#</a> 安装nvm</h3><div class="language-bash"><pre><code>$ <span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh <span class="token operator">|</span> <span class="token function">bash</span>\n</code></pre></div><h3 id="添加环境变量"><a class="header-anchor" href="#添加环境变量" aria-hidden="true">#</a> 添加环境变量</h3><div class="language-bash"><pre><code>$ <span class="token function">vim</span> ~/.zshrc\n\n在尾部添加以下配置\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">&quot;<span class="token environment constant">$HOME</span>/.nvm&quot;</span>\n<span class="token punctuation">[</span> -s <span class="token string">&quot;<span class="token variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>. <span class="token string">&quot;<span class="token variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="token comment"># This loads nvm</span>\n<span class="token punctuation">[</span> -s <span class="token string">&quot;<span class="token variable">$NVM_DIR</span>/bash_completion&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\\</span>. <span class="token string">&quot;<span class="token variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="token comment"># This loads nvm bash_completion</span>\n</code></pre></div><h3 id="使用命令"><a class="header-anchor" href="#使用命令" aria-hidden="true">#</a> 使用命令</h3><div class="language-bash"><pre><code>$ nvm ls-remote <span class="token comment"># 列出所有支持的Node.js版本</span>\n$ nvm <span class="token function">ls</span> <span class="token comment"># 列出本地已安装的Node.js版本</span>\n$ nvm <span class="token function">install</span> <span class="token number">11.5</span>.0 <span class="token comment"># 安装指定的Node.js版本</span>\n$ nvm <span class="token builtin class-name">alias</span> default <span class="token number">11</span> <span class="token comment"># 设置默认使用的版本</span>\n</code></pre></div><h2 id="nrm"><a class="header-anchor" href="#nrm" aria-hidden="true">#</a> nrm</h2><p>使用<a href="https://github.com/Pana/nrm" target="_blank" rel="noopener noreferrer">nrm</a>可以让我们来切换不同的npm源而不用单独安装cnpm之类的库</p><h3 id="安装nrm"><a class="header-anchor" href="#安装nrm" aria-hidden="true">#</a> 安装nrm</h3><div class="language-bash"><pre><code>$ <span class="token function">npm</span> <span class="token function">install</span> -g nrm\n</code></pre></div><h3 id="使用命令-2"><a class="header-anchor" href="#使用命令-2" aria-hidden="true">#</a> 使用命令</h3><div class="language-bash"><pre><code>$ nrm <span class="token function">ls</span> <span class="token comment"># 列出当前支持切换的源</span>\n$ nrm use taobao <span class="token comment"># 使用taobao的源作为默认的npm源</span>\n</code></pre></div><h2 id="实用模块"><a class="header-anchor" href="#实用模块" aria-hidden="true">#</a> 实用模块</h2><p>下面来介绍一些实用的Node.js模块</p><h3 id="dclone"><a class="header-anchor" href="#dclone" aria-hidden="true">#</a> dclone</h3><p><a href="https://github.com/zhangyuang/dclone" target="_blank" rel="noopener noreferrer">dclone</a>用来下载某个特定的github仓库的文件夹，而不是下载整个项目，可以缩短你的下载时间</p><div class="language-bash"><pre><code>$ <span class="token function">npm</span> i -g dclone\n$ dclone https://github.com/ykfe/egg-react-ssr/tree/dev/example/ssr-with-loadable\n</code></pre></div><h3 id="http-server"><a class="header-anchor" href="#http-server" aria-hidden="true">#</a> http-server</h3><p>使用<a href="https://www.npmjs.com/package/http-server" target="_blank" rel="noopener noreferrer">http-server</a>我们可以快速的创建一个本地http server服务，并且托管我们当前目录作为静态资源文件夹而不用特地去用Node.js框架来搭建一个静态资源服务</p><h4 id="如何使用http-server"><a class="header-anchor" href="#如何使用http-server" aria-hidden="true">#</a> 如何使用http-server</h4><div class="language-bash"><pre><code>$ <span class="token function">npm</span> <span class="token function">install</span> http-server -g <span class="token comment"># 安装http-server模块</span>\n$ http-server <span class="token builtin class-name">.</span> -p <span class="token number">8080</span> <span class="token comment"># 监听8080端口，以当前目录作为静态资源目录</span>\n</code></pre></div><h3 id="npx"><a class="header-anchor" href="#npx" aria-hidden="true">#</a> npx</h3><p>使用npx来让我们可以方便的调用项目的依赖模块</p><div class="language-bash"><pre><code>$ npx jest <span class="token comment"># 直接调用node_modules中的jest而不需要手动编写npm script</span>\n$ npx create-react-app app <span class="token comment"># npx 将create-react-app下载到一个临时目录，使用以后再删除。使得你不需要全局安装</span>\n</code></pre></div><h3 id="optimist"><a class="header-anchor" href="#optimist" aria-hidden="true">#</a> optimist</h3><p>用于解析命令行参数</p><div class="language-js"><pre><code><span class="token keyword">var</span> argv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;optimist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>argv<span class="token punctuation">;</span>\n \n<span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>rif <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">*</span> argv<span class="token punctuation">.</span>xup <span class="token operator">&gt;</span> <span class="token number">7.138</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Buy more riffiwobbles&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">else</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Sell the xupptumblers&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="yargs"><a class="header-anchor" href="#yargs" aria-hidden="true">#</a> yargs</h3><p>用于开发命令行工具</p><p><img src="https://raw.githubusercontent.com/yargs/yargs/master/screen.png" alt=""></p><h3 id="cloc"><a class="header-anchor" href="#cloc" aria-hidden="true">#</a> cloc</h3><p>使用cloc 快速统计某文件夹下代码的数据, 更多参考资料查看<a href="https://www.hi-linux.com/posts/4004.html" target="_blank" rel="noopener noreferrer">代码统计利器 Cloc</a></p><div class="language-bash"><pre><code>$ <span class="token function">npm</span> i -g cloc\n$ cloc --exclude-dir<span class="token operator">=</span>node_modules <span class="token builtin class-name">.</span> --exclude-ext<span class="token operator">=</span>json,html <span class="token comment"># 统计文件类型，排除node_modules,排除json，html文件</span>\n</code></pre></div><p><img src="https://img.alicdn.com/tfs/TB1kYu2qND1gK0jSZFsXXbldVXa-1136-950.jpg" alt="cloc"></p><h3 id="promisify"><a class="header-anchor" href="#promisify" aria-hidden="true">#</a> promisify</h3><p><a href="http://nodejs.cn/api/util.html#util_util_promisify_original" target="_blank" rel="noopener noreferrer">util.promisify</a>是Node.js的官方API，使用该API我们可以将callback形式的Node.js API包装为Promise的形式,只要符合最后一个参数是callback，并且callback第一个参数是错误处理的API都可以通过promisify来包装</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">{</span> promisify <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> exec <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> execWithPromise <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span>exec<span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">installServer</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> stdout <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">execWithPromise</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">npm i -g http-server</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="mdv"><a class="header-anchor" href="#mdv" aria-hidden="true">#</a> mdv</h3><p><a href="https://www.npmjs.com/package/mdv" target="_blank" rel="noopener noreferrer">mdv</a>是一个用来校验markdown语法的npm模块，此模块检测的语法错误类型包括七项：插入图片时是否添加Alt标签，超链接是否包含链接名称，页面内跳转时是否缺失锚点，页面内跳转的地址是否包含#，锚点是否包含#，锚点是否重复定义，json、xml语法是否解析失败。</p><h4 id="安装使用"><a class="header-anchor" href="#安装使用" aria-hidden="true">#</a> 安装使用</h4><div class="language-bash"><pre><code>$ <span class="token function">npm</span> i -g mdv\n$ mdv xxx.md -d <span class="token comment"># 检测md文件语法</span>\n$ mdv xxx.md -s <span class="token comment"># 根据md生成html</span>\n</code></pre></div><h4 id="错误类型"><a class="header-anchor" href="#错误类型" aria-hidden="true">#</a> 错误类型</h4><ul><li>重复链接 - <code>duplicatedAnchors[]</code></li><li>锚点地址错误 - <code>anchorsWithHash[]</code></li><li>空的链接 - <code>anchorsWithEmptyText[]</code></li><li>img标签缺少alt属性 tag - <code>imagesWithMissingAlt[]</code></li><li><code>yaml</code>, <code>json</code>, <code>xml</code> or <code>abnf</code> 语法解析错误 - <code>nonParsingExamples[]</code></li></ul><h2 id="使用-npm-link-调试模块"><a class="header-anchor" href="#使用-npm-link-调试模块" aria-hidden="true">#</a> 使用 npm link 调试模块</h2><p>熟练的使用npm link可以帮助我们本地调试任何开源项目，当我们的一个项目还没有发布到npmjs.com想在本地测试时，或者当我们想修改React/Vue的源码想在本地测试效果时，我们都需要使用npm link来进行测试。npm link 类似于Linux中的软链接，简单理解可以理解为一个快捷方式。使用方式：</p><div class="language-"><pre><code>$ cd vue // 进入本地clone下来的vue文件夹\n$ npm link // 如果没有全局安装过vue 此时会创建全局node_modules下的一个软链接vue指向本地clone的vue入口文件\n$ npm link vue // 在需要用调试vue模块的应用执行该命令会将当前应用的node_modules/vue指向全局node_modules/vue软链接\n</code></pre></div><p><img src="https://gw.alicdn.com/tfs/TB1iEl0XKH2gK0jSZFEXXcqMpXa-1450-876.jpg" alt=""><img src="https://gw.alicdn.com/tfs/TB1QBh0XQY2gK0jSZFgXXc5OFXa-1450-860.jpg" alt=""></p>',51);t.render=function(a,e,t,o,c,l){return n(),s("div",null,[p])};export default t;export{e as __pageData};
