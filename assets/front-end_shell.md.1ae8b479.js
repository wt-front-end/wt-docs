import{o as e,c as a,b as s}from"./app.c212677f.js";const r='{"title":"终端","description":"","frontmatter":{"sidebarDepth":2},"headers":[{"level":2,"title":"iterm2","slug":"iterm2"},{"level":3,"title":"安装 iterm2","slug":"安装-iterm2"},{"level":3,"title":"快捷键","slug":"快捷键"},{"level":2,"title":"zsh","slug":"zsh"},{"level":3,"title":"安装 zsh","slug":"安装-zsh"},{"level":3,"title":"配置主题","slug":"配置主题"},{"level":3,"title":"插件","slug":"插件"},{"level":3,"title":"进入目录","slug":"进入目录"},{"level":3,"title":"路径补全","slug":"路径补全"}],"relativePath":"front-end/shell.md","lastUpdated":1676009954035}',n={},t=s('<h1 id="终端"><a class="header-anchor" href="#终端" aria-hidden="true">#</a> 终端</h1><p>本篇将会介绍 zsh 这个 shell 的强大之处以及 iterm2 这个强大的现代化终端，将两个工具结合使用即酷炫又实用。<br> 注：本文只会介绍实际开发中使用频率比较高的用法，该工具的强大功能并未全部介绍完。如有兴趣可查阅官方文档继续学习。</p><h2 id="iterm2"><a class="header-anchor" href="#iterm2" aria-hidden="true">#</a> iterm2</h2><blockquote><p>iterm2 取代了默认的 Terminal，它将带给你现代化的体验以及任何你想要的功能</p></blockquote><h3 id="安装-iterm2"><a class="header-anchor" href="#安装-iterm2" aria-hidden="true">#</a> 安装 iterm2</h3><p>这里我们直接去<a href="https://www.iterm2.com/" target="_blank" rel="noopener noreferrer">官网</a>进行 download</p><h3 id="快捷键"><a class="header-anchor" href="#快捷键" aria-hidden="true">#</a> 快捷键</h3><p>熟练使用快捷键是程序员的基本操守</p><h4 id="唤醒热键"><a class="header-anchor" href="#唤醒热键" aria-hidden="true">#</a> 唤醒热键</h4><p>给终端加一个快速唤醒/隐藏的快捷键是必须要做的，否则用鼠标找到终端的快捷方式再打开这种做法不仅慢而且逼格低，设置方式 <code>iterm2</code> -&gt; <code>Preferences</code> -&gt; <code>Keys</code> -&gt; <code>Hotkey</code></p><p><img src="https://gw.alicdn.com/tfs/TB1AHfOXvb2gK0jSZK9XXaEgFXa-1920-1048.jpg" alt=""></p><p>这里我们建议使用 <code>option</code> + <code>space</code> 组合键来唤醒/隐藏终端</p><h4 id="其他快捷键"><a class="header-anchor" href="#其他快捷键" aria-hidden="true">#</a> 其他快捷键</h4><p>以下快捷键与 chrome 快捷键类似，必须熟练使用</p><ul><li><code>ctrl</code> + <code>a/e</code> 快速切换到当前正在输入的文本的头部／尾部</li><li><code>ctrl</code> + <code>u</code> 清空当前输入</li><li><code>cmd</code> + <code>T</code> 打开一个新的 iterm2 Tab</li><li><code>cmd</code> + <code>方向键</code> 左右切换 Tab</li><li><code>cmd</code> + <code>D</code> 分屏</li><li><code>cmd</code> + <code>K</code> 清屏</li><li><code>cmd</code> + <code>N</code> 打开一个新的 iterm2 窗口</li></ul><h4 id="透明度"><a class="header-anchor" href="#透明度" aria-hidden="true">#</a> 透明度</h4><p>个人喜好这里建议给 iterm2 配置一个透明度，看起来体验感舒适很多 <code>iterm2</code> -&gt; <code>Preferences</code> -&gt; <code>Profiles</code> -&gt; <code>Window</code> -&gt; <code>Transparency</code></p><p>效果如下</p><p><img src="https://files.catbox.moe/xu35b2.png" alt=""></p><h2 id="zsh"><a class="header-anchor" href="#zsh" aria-hidden="true">#</a> zsh</h2><blockquote><p>Unix shell，一种壳层与命令行界面，是 UNIX 操作系统下传统的用户和计算机的交互界面。第一个用户直接输入命令来执行各种各样的任务。 普通意义上的 shell 就是可以接受用户输入命令的程序。它之所以被称作 shell 是因为它隐藏了操作系统低层的细节。同样的 Unix 下的图形用户界面 GNOME 和 KDE，有时也被叫做“虚拟 shell”或“图形 shell”。</p></blockquote><p>目前常见的 shell 有 bash、sh、csh，ksh 等, 这里我们介绍 shell 中的极品 zsh。 zsh 的强大之处随便列举就有以下几点，色彩高亮，命令提示，智能补全等等，下面我们会详细介绍 这么牛逼的东西安装起来自然是及其麻烦的，好在已经有大神帮我们做了一个一键安装 zsh 的脚本<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener noreferrer">oh-my-zsh</a></p><h3 id="安装-zsh"><a class="header-anchor" href="#安装-zsh" aria-hidden="true">#</a> 安装 zsh</h3><p>使用 curl 来安装</p><div class="language-bash"><pre><code>$ <span class="token function">sh</span> -c <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>&quot;</span>\n</code></pre></div><h3 id="配置主题"><a class="header-anchor" href="#配置主题" aria-hidden="true">#</a> 配置主题</h3><p>默认的 zsh 主题是非常丑并且展示的信息也很少的，这里 zsh 提供了多种主题供我们直接使用，当然你可以根据自己的喜欢来编写一个主题，这里我们使用 ys 这个主题。设置方式</p><div class="language-bash"><pre><code>$ <span class="token function">vim</span> ~/.zshrc <span class="token comment"># 打开zsh配置文件</span>\n<span class="token number">10</span> ZSH_THEME <span class="token operator">=</span> <span class="token string">&quot;ys&quot;</span> <span class="token comment"># 在第10行设置当前主题为ys</span>\n$ <span class="token builtin class-name">source</span> ~/.zshrc <span class="token comment"># 重新执行一遍zsh配置文件</span>\n</code></pre></div><p><img src="https://files.catbox.moe/xu35b2.png" alt=""></p><h3 id="插件"><a class="header-anchor" href="#插件" aria-hidden="true">#</a> 插件</h3><p>zsh 提供了插件功能，我们可以通过插件来实现更加强大的功能</p><h4 id="autojump-插件"><a class="header-anchor" href="#autojump-插件" aria-hidden="true">#</a> autojump 插件</h4><p>必装插件没有之一，可以让你在任意目录之间进行跳转</p><div class="language-bash"><pre><code>$ brew <span class="token function">install</span> autojump\n$ <span class="token function">vim</span> ~/.zshrc\n\n<span class="token number">61</span> plugins <span class="token operator">=</span> <span class="token punctuation">(</span>\n<span class="token number">62</span>  <span class="token function">git</span>\n<span class="token number">63</span>  autojump\n<span class="token number">64</span> <span class="token punctuation">)</span>\n\n$ <span class="token builtin class-name">source</span> ~/.zshrc\n</code></pre></div><h5 id="使用-autojump"><a class="header-anchor" href="#使用-autojump" aria-hidden="true">#</a> 使用 autojump</h5><p><code>j</code> + <code>目录缩写</code> 快速去到你曾经进入过的目录</p><p>autojump 会自动对你进入过的目录进行记录并且定义权重，使用 j 命令可以迅速进入目录</p><div class="language-bash"><pre><code>$ j hub <span class="token comment"># 等价于 cd ~/workspace/github</span>\n$ j hub <span class="token comment"># 如果当前目录不对，可以重复执行该命令，会自动根据权重依次匹配</span>\n$ d <span class="token comment"># 会列出你曾经进入过的目录，输入前面的序号可以直接进入该目录</span>\n</code></pre></div><h4 id="git-插件"><a class="header-anchor" href="#git-插件" aria-hidden="true">#</a> <a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/git" target="_blank" rel="noopener noreferrer">git 插件</a></h4><p>git 插件也是必装的插件，它提供了百余个 alias 来简化你的 git 命令，alias 列表可访问插件链接查看。以下几种是会被经常使用的命令，你也可以在.zshrc 中额外添加喜好的 alias</p><div class="language-bash"><pre><code>$ g <span class="token comment"># 等价于git</span>\n$ ga <span class="token comment"># 等价于git add</span>\n$ gcmsg <span class="token string">&quot;&quot;</span> <span class="token comment"># 等价于git commit -m &quot;&quot;</span>\n$ gco <span class="token comment"># 等价与git check out</span>\n$ gb <span class="token comment"># 等价于git branch</span>\n</code></pre></div><h4 id="zsh-syntax-highlighting"><a class="header-anchor" href="#zsh-syntax-highlighting" aria-hidden="true">#</a> zsh-syntax-highlighting</h4><p>既然 zsh 都已经安排上了，那 zsh 可用命令的高亮显示自然是不能落下，借助<a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md" target="_blank" rel="noopener noreferrer">zsh-syntax-highlighting</a> 来实现命令高亮</p><h5 id="preview"><a class="header-anchor" href="#preview" aria-hidden="true">#</a> Preview</h5><p>使用前：</p><p><img src="https://img.alicdn.com/tfs/TB1F_iCb4D1gK0jSZFsXXbldVXa-404-62.png" alt="zsh-syntax-highlighting 使用前"></p><p>使用后：</p><p><img src="https://img.alicdn.com/tfs/TB1H45BbW67gK0jSZFHXXa9jVXa-386-54.png" alt="zsh-syntax-highlighting 使用后"></p><h4 id="zsh-autosuggestions"><a class="header-anchor" href="#zsh-autosuggestions" aria-hidden="true">#</a> zsh-autosuggestions</h4><p>它能够根据你的命令历史记录即时提示，个人对它的喜爱程度仅次于 autojump。BTW，每次用同事的电脑我都会想吐槽，还不是因为他没安装 <a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md" target="_blank" rel="noopener noreferrer">zsh-autosuggestions</a> 😏</p><h5 id="preview-2"><a class="header-anchor" href="#preview-2" aria-hidden="true">#</a> Preview</h5><p><a href="https://asciinema.org/a/37390" target="_blank"><img src="https://asciinema.org/a/37390.png" width="400"></a></p><h4 id="last-working-dir"><a class="header-anchor" href="#last-working-dir" aria-hidden="true">#</a> last-working-dir</h4><p>last-working-dir 插件，可以记录上一次退出命令行时候的所在路径，并且在下一次启动命令行的时候自动恢复到上一次所在的路径。这一切不需要我们进行任何操作，全部都是自动完成的</p><h5 id="preview-3"><a class="header-anchor" href="#preview-3" aria-hidden="true">#</a> Preview</h5><p><img src="https://img.alicdn.com/tfs/TB1poGSb4D1gK0jSZFKXXcJrVXa-1764-1408.jpg" alt="last-working-dir 示例"></p><h4 id="web-search"><a class="header-anchor" href="#web-search" aria-hidden="true">#</a> <a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/web-search" target="_blank" rel="noopener noreferrer">web-search</a></h4><p>web-search 集成了程序猿可能会用到的大部分的搜索引擎，在 iterm 中键入 <code>${搜索引擎} ${搜索关键词}</code> ，他可以直接打开对应的网页，缩短了你的搜索路径</p><p>例如，输入 <code>google javascript</code> ，它会在我的浏览器中直接打开 <a href="https://www.google.com/search?q=javascript" target="_blank" rel="noopener noreferrer">https://www.google.com/search?q=javascript</a></p><p>web-search 常用的搜索引擎如下:</p><ul><li>google</li><li>github</li><li>baidu</li><li>stackoverflow</li></ul><h3 id="进入目录"><a class="header-anchor" href="#进入目录" aria-hidden="true">#</a> 进入目录</h3><p>无需输入 <code>cd</code> 命令<br> 输入 <code>~</code> 等价于 <code>cd ～</code></p><h3 id="路径补全"><a class="header-anchor" href="#路径补全" aria-hidden="true">#</a> 路径补全</h3><p>*nix 下的其他 shell 默认可以通过 tab 来实现路径补全，但是功能比起 zsh 的路径补全简直是太简单了。这里我们举一个例子 <code>cd /u/l/b</code> 按下 tab 键自动帮你补全为 <code>cd /usr/local/bin/</code></p>',65);n.render=function(s,r,n,o,h,c){return e(),a("div",null,[t])};export default n;export{r as __pageData};
