import{o as n,c as s,b as a}from"./app.c212677f.js";const t='{"title":"组件 内部规范","description":"","frontmatter":{"title":"组件 内部规范"},"headers":[{"level":2,"title":"「API」 使用规范","slug":"「api」-使用规范"},{"level":3,"title":"1. 调用方式","slug":"_1-调用方式"},{"level":3,"title":"2.接口书写命名格式","slug":"_2-接口书写命名格式"},{"level":2,"title":"「权限」判断按钮级权限","slug":"「权限」判断按钮级权限"},{"level":3,"title":"1.自定义指令写法","slug":"_1-自定义指令写法"},{"level":3,"title":"2.在js中使用","slug":"_2-在js中使用"},{"level":2,"title":"「工具」常用工具封装","slug":"「工具」常用工具封装"},{"level":2,"title":"「table」 封装,采用 jsx 书写方式","slug":"「table」-封装-采用-jsx-书写方式"}],"relativePath":"element/index.md","lastUpdated":1674009752349}',p={},o=a('<h1 id="内部规范"><a class="header-anchor" href="#内部规范" aria-hidden="true">#</a> 内部规范</h1><h2 id="「api」-使用规范"><a class="header-anchor" href="#「api」-使用规范" aria-hidden="true">#</a> 「API」 使用规范</h2><div class="tip custom-block"><p class="custom-block-title">说明</p><p>所有文件调用需要挂载在<code>$api</code>下,方法写在<code>api</code>文件夹一级目录下,会自动注入</p></div><h3 id="_1-调用方式"><a class="header-anchor" href="#_1-调用方式" aria-hidden="true">#</a> 1. 调用方式</h3><ul><li>「接口请求」自动封装挂载到<code>vue</code>实例上</li></ul><div class="language-bash"><pre><code>// 获取用户列表\n this.<span class="token variable">$api</span>.getUserList<span class="token punctuation">(</span><span class="token punctuation">)</span>.then<span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        console.log<span class="token punctuation">(</span><span class="token string">&#39;🐛:: handleClickUser -&gt; res&#39;</span>, res<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="_2-接口书写命名格式"><a class="header-anchor" href="#_2-接口书写命名格式" aria-hidden="true">#</a> 2.接口书写命名格式</h3><ul><li><ol><li>为避免命名冲突导致请求错误,采用一下命名</li></ol></li></ul><div class="language-bash"><pre><code>/*\n * Api命名建议:\n  * 组成: <span class="token punctuation">{</span>请求方法<span class="token punctuation">}</span><span class="token punctuation">{</span>文件名<span class="token punctuation">}</span><span class="token punctuation">{</span>接口用处<span class="token punctuation">}</span><span class="token punctuation">{</span>Api<span class="token punctuation">}</span>\n  * <span class="token number">1</span>.请求方法<span class="token punctuation">(</span>get查询, post增加, put修改, delete删除, upload上传<span class="token punctuation">)</span>\n  * <span class="token number">2</span>.当前js所在文件名称如gen, login\n  * <span class="token number">3</span>.接口用处, 如userList, deviceDetail\n  * <span class="token number">4</span>.Api, 表明是Api接口, 区别于其他方法\n  * 目的: 语义化明确, 看到接口就知道类型用处\n  * 示例: getManageUserListApi<span class="token punctuation">(</span>获取用户列表api<span class="token punctuation">)</span>, putLoginMsCaptchaApi<span class="token punctuation">(</span>获取验证码api<span class="token punctuation">)</span>\n */\n</code></pre></div><ul><li><ol start="2"><li>接口命名一律采用小驼峰命名法</li></ol></li><li><ol start="3"><li>新书写接口推荐一下写法,极度精简,可读性高</li></ol></li></ul><div class="language-bash"><pre><code>// get 请求 用户列表\n<span class="token builtin class-name">export</span> const getManageGetUserApi <span class="token operator">=</span> params <span class="token operator">=</span><span class="token operator">&gt;</span> axios.get<span class="token punctuation">(</span>api.user, <span class="token punctuation">{</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span>\n// OR\n<span class="token builtin class-name">export</span> const getManageGetUserApi <span class="token operator">=</span> params <span class="token operator">=</span><span class="token operator">&gt;</span> axios.get<span class="token punctuation">(</span><span class="token string">&#39;/system/user/list&#39;</span>, <span class="token punctuation">{</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n// post 请求\n<span class="token builtin class-name">export</span> const postManageServiceApi <span class="token operator">=</span> data <span class="token operator">=</span><span class="token operator">&gt;</span> axios.post<span class="token punctuation">(</span><span class="token string">&#39;/service&#39;</span>, data<span class="token punctuation">)</span>\n\n// 切换请求方法\n<span class="token builtin class-name">export</span> const postManageServiceApi <span class="token operator">=</span> data <span class="token operator">=</span><span class="token operator">&gt;</span> axios<span class="token punctuation">[</span>data.id <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span> ? <span class="token string">&#39;post&#39;</span> <span class="token builtin class-name">:</span> <span class="token string">&#39;put&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">&#39;/service&#39;</span>, data<span class="token punctuation">)</span>\n</code></pre></div><ul><li><ol start="4"><li>每个 api 前面需要添加中文注释</li></ol></li></ul><h2 id="「权限」判断按钮级权限"><a class="header-anchor" href="#「权限」判断按钮级权限" aria-hidden="true">#</a> 「权限」判断按钮级权限</h2><h3 id="_1-自定义指令写法"><a class="header-anchor" href="#_1-自定义指令写法" aria-hidden="true">#</a> 1.自定义指令写法</h3><div class="language-js"><pre><code><span class="token comment">// 指令写法</span>\n<span class="token operator">&lt;</span>div v<span class="token operator">-</span>auth<span class="token operator">=</span><span class="token string">&quot;&#39;system:dict:add&#39;&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token comment">// v-if写法</span>\n<span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;$pm(&#39;system:dict:add&#39;)&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n</code></pre></div><h3 id="_2-在js中使用"><a class="header-anchor" href="#_2-在js中使用" aria-hidden="true">#</a> 2.在<code>js</code>中使用</h3><div class="language-js"><pre><code><span class="token comment">// 挂载到`VM`实例上</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$pm <span class="token operator">===</span> checkPermission\n</code></pre></div><h2 id="「工具」常用工具封装"><a class="header-anchor" href="#「工具」常用工具封装" aria-hidden="true">#</a> 「工具」常用工具封装</h2><ul><li>时间格式化封装,采用<code>dayJS</code></li></ul><div class="language-js"><pre><code>\n<span class="token comment">// 过滤器封装 YYYY-MM-DD</span>\n<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>time <span class="token operator">|</span> date<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n\n<span class="token comment">// 过滤器封装 YYYY-MM-DD HH:mm:ss</span>\n<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>time <span class="token operator">|</span> datetime<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n\n<span class="token comment">// 挂载到vue实例上</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$formatDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// OR</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$formatDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;YYYY-MM-DD&#39;</span><span class="token punctuation">)</span>\n\n</code></pre></div><h2 id="「table」-封装-采用-jsx-书写方式"><a class="header-anchor" href="#「table」-封装-采用-jsx-书写方式" aria-hidden="true">#</a> 「table」 封装,采用 jsx 书写方式</h2><ul><li>支持两种书写方式(直接传输数据和表头)</li></ul><div class="language-js"><pre><code><span class="token comment">// columns 列  tableData 表数据   params 默认请求数据</span>\n    <span class="token operator">&lt;</span>wt<span class="token operator">-</span>table <span class="token operator">:</span>columns<span class="token operator">=</span><span class="token string">&quot;columns&quot;</span> <span class="token operator">:</span>tableData<span class="token operator">=</span><span class="token string">&quot;tableData&quot;</span> <span class="token operator">:</span>params<span class="token operator">=</span><span class="token string">&quot;params&quot;</span> <span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>wt<span class="token operator">-</span>table<span class="token operator">&gt;</span>\n</code></pre></div><ul><li>支持传输接口和 api</li></ul><div class="language-js"><pre><code><span class="token comment">// columns 列  tableData 表数据   params 默认请求数据</span>\n    <span class="token operator">&lt;</span>wt<span class="token operator">-</span>table <span class="token operator">:</span>columns<span class="token operator">=</span><span class="token string">&quot;columns&quot;</span> <span class="token operator">:</span>api<span class="token operator">=</span><span class="token string">&quot;$api.postManageServiceApi&quot;</span> <span class="token operator">:</span>params<span class="token operator">=</span><span class="token string">&quot;params&quot;</span> <span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>wt<span class="token operator">-</span>table<span class="token operator">&gt;</span>\n</code></pre></div><ul><li>表格数据提供三种写法</li></ul><ol><li>引入外部<code>js</code>,<code>table</code>表头数据,需要把<code>this</code>作为参数传进去</li></ol><blockquote><p>需要创建 <code>h</code> 函数,不然会报错,需要把<code>js</code>文件建立在同级目录便于管理</p></blockquote><div class="language-js"><pre><code><span class="token comment">// 外部数据</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;序号&#39;</span><span class="token punctuation">,</span>\n    dataIndex<span class="token operator">:</span> <span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">customRender</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> row<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> h <span class="token operator">=</span> props<span class="token punctuation">.</span>$createElement <span class="token comment">// 需要创建h函数</span>\n      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n\n<span class="token comment">// 组件内部,需要把this传进去</span>\n<span class="token keyword">import</span> columns <span class="token keyword">from</span> <span class="token string">&#39;./table.js&#39;</span>\ncolumns<span class="token operator">:</span> <span class="token function">columns</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n</code></pre></div><blockquote><p>表格渲染支持四种写法</p></blockquote><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>wt-table</span> <span class="token attr-name">:columns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>columns<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:api</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$api.getManageGetUserApi<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>wt-table</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// 适用于普通标签,更改文字内容</span>\n <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>\n    dataIndex<span class="token operator">:</span> <span class="token string">&#39;createTime&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">customRender</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> row<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        children<span class="token operator">:</span> props<span class="token punctuation">.</span><span class="token function">$formatDate</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 适用于大多数,前提是使用足够熟练</span>\n  <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;邮箱&#39;</span><span class="token punctuation">,</span>\n    dataIndex<span class="token operator">:</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">customRender</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> row<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> h <span class="token operator">=</span> props<span class="token punctuation">.</span>$createElement\n      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token comment">// 在HTML连绵写slot渲染,比较负责的处理逻辑,每个表格内容较多</span>\n   <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;用户名&#39;</span><span class="token punctuation">,</span>\n    dataIndex<span class="token operator">:</span> <span class="token string">&#39;userName&#39;</span><span class="token punctuation">,</span>\n    scopedSlots<span class="token operator">:</span> <span class="token punctuation">{</span> customRender<span class="token operator">:</span> <span class="token string">&#39;userName&#39;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 更简洁的写标签适用熟悉react</span>\n  <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;备注&#39;</span><span class="token punctuation">,</span>\n    dataIndex<span class="token operator">:</span> <span class="token string">&#39;remark&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">customRender</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> row<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token operator">&lt;</span>a<span class="token operator">&gt;</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre></div><ol start="2"><li>直接写在组件内部,但可能会造成单文件过长,不利于阅读</li></ol><blockquote><p>这种写法支持 <code>jsx</code> 形式,可以少些大部分代码「表格数据不多的时候推荐」</p></blockquote><div class="language-js"><pre><code>columns<span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>\n    dataIndex<span class="token operator">:</span> <span class="token string">&#39;createTime&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">customRender</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> row<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        children<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$formatDate</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;邮箱&#39;</span><span class="token punctuation">,</span>\n    dataIndex<span class="token operator">:</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">customRender</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">text<span class="token punctuation">,</span> row<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token operator">&lt;</span>a<span class="token operator">&gt;</span><span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre></div><ol start="3"><li><code>mixins</code> 方式混入,同样可读性好,但此语法未来可能会废弃[不推荐]</li></ol>',36);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
