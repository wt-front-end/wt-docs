import{o as e,c as a,b as n}from"./app.c212677f.js";const t='{"title":"Git 提交规范","description":"","frontmatter":{},"headers":[{"level":2,"title":"提交代码","slug":"提交代码"},{"level":2,"title":"推送代码","slug":"推送代码"},{"level":3,"title":"修改类型","slug":"修改类型"},{"level":2,"title":"从自己分支合并到pre","slug":"从自己分支合并到pre"},{"level":2,"title":"Git 全局设置","slug":"git-全局设置"},{"level":3,"title":"创建一个新仓库","slug":"创建一个新仓库"},{"level":3,"title":"推送现有文件夹","slug":"推送现有文件夹"},{"level":3,"title":"推送现有的 Git 仓库","slug":"推送现有的-git-仓库"},{"level":2,"title":"分支命名规范","slug":"分支命名规范"},{"level":2,"title":"常用命令","slug":"常用命令"}],"relativePath":"git/index.md","lastUpdated":1674009752349}',s={},i=n('<h1 id="git-提交规范"><a class="header-anchor" href="#git-提交规范" aria-hidden="true">#</a> Git 提交规范</h1><h2 id="提交代码"><a class="header-anchor" href="#提交代码" aria-hidden="true">#</a> 提交代码</h2><ol><li>clone 代码</li></ol><div class="language-bash"><pre><code><span class="token function">git</span> clone git@47.111.5.200:jixk/wt-web-template.git\n// 只克隆最新的一份提交\n<span class="token function">git</span> clone git@47.111.5.200:jixk/wt-web-template.git --depth <span class="token number">1</span>\n</code></pre></div><blockquote><p>切换分支</p></blockquote><div class="language-bash"><pre><code><span class="token function">git</span> checkout jxk\n</code></pre></div><ol start="2"><li>拉取代码</li></ol><div class="language-bash"><pre><code>// 拉取master分支代码\n<span class="token function">git</span> pull origin master\n</code></pre></div><blockquote><p>如果本地代码有改动,拉取不下来</p></blockquote><div class="language-bash"><pre><code>// 可以贮藏\n<span class="token function">git</span> stash\n// 取消贮藏\n<span class="token function">git</span> stash pop\n</code></pre></div><h2 id="推送代码"><a class="header-anchor" href="#推送代码" aria-hidden="true">#</a> 推送代码</h2><div class="language-bash"><pre><code>// 提交commit\n<span class="token function">git</span> commit -m <span class="token string">&#39;提交最新的内容&#39;</span>\n<span class="token function">git</span> push origin jxk\n</code></pre></div><h3 id="修改类型"><a class="header-anchor" href="#修改类型" aria-hidden="true">#</a> 修改类型</h3><blockquote><p>每个类型值都表示了不同的含义，类型值必须是以下的其中一个：</p></blockquote><ul><li>feat：提交新功能</li><li>fix：修复了 bug</li><li>docs：只修改了文档</li><li>style：调整代码格式，未修改代码逻辑（比如修改空格、格式化、缺少分号等）</li><li>refactor：代码重构，既没修复 bug 也没有添加新功能</li><li>perf：性能优化，提高性能的代码更改</li><li>test：添加或修改代码测试</li><li>chore：对构建流程或辅助工具和依赖库（如文档生成等）的更改</li></ul><h2 id="从自己分支合并到pre"><a class="header-anchor" href="#从自己分支合并到pre" aria-hidden="true">#</a> 从自己分支合并到<code>pre</code></h2><blockquote><p>需要在 gitlab 上手动提交</p></blockquote><p><img src="https://files.catbox.moe/wkua1s.png" alt=""></p><h2 id="git-全局设置"><a class="header-anchor" href="#git-全局设置" aria-hidden="true">#</a> Git 全局设置</h2><div class="language-bash"><pre><code><span class="token function">git</span> config --global user.name <span class="token string">&quot;冀小康&quot;</span>\n<span class="token function">git</span> config --global user.email <span class="token string">&quot;jixk@watone.com.cn&quot;</span>\n</code></pre></div><h3 id="创建一个新仓库"><a class="header-anchor" href="#创建一个新仓库" aria-hidden="true">#</a> 创建一个新仓库</h3><div class="language-bsah"><pre><code>git clone git@47.111.5.200:jixk/wt-web-template.git\ncd wt-web-template\ntouch README.md\ngit add README.md\ngit commit -m &quot;add README&quot;\ngit push -u origin master\n</code></pre></div><h3 id="推送现有文件夹"><a class="header-anchor" href="#推送现有文件夹" aria-hidden="true">#</a> 推送现有文件夹</h3><div class="language-bsah"><pre><code>cd existing_folder\ngit init\ngit remote add origin git@47.111.5.200:jixk/wt-web-template.git\ngit add .\ngit commit -m &quot;Initial commit&quot;\ngit push -u origin master\n</code></pre></div><h3 id="推送现有的-git-仓库"><a class="header-anchor" href="#推送现有的-git-仓库" aria-hidden="true">#</a> 推送现有的 Git 仓库</h3><div class="language-bash"><pre><code><span class="token builtin class-name">cd</span> existing_repo\n<span class="token function">git</span> remote <span class="token function">rename</span> origin old-origin\n<span class="token function">git</span> remote <span class="token function">add</span> origin git@47.111.5.200:jixk/wt-web-template.git\n<span class="token function">git</span> push -u origin --all\n<span class="token function">git</span> push -u origin --tags\n</code></pre></div><h2 id="分支命名规范"><a class="header-anchor" href="#分支命名规范" aria-hidden="true">#</a> 分支命名规范</h2><blockquote><p>修复<code>bug</code>需要在<code>pre</code>新建分支<code>fixed-名字缩写-月份-日期</code></p></blockquote><blockquote><p>开发新功能需要在自己分支上操作一般为自己名称缩写</p></blockquote><blockquote><p>提交代码规范,任何人不允许提交到<code>master</code>分支</p></blockquote><blockquote><p>需要提交到<code>pre</code>然后合并到<code>master</code>分支</p></blockquote><blockquote><p><code>pre</code>环境发布不做限制,<code>master</code>发布须在<code>pre</code>验证通过才能发布</p></blockquote><h2 id="常用命令"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><div class="language-bash"><pre><code>$ <span class="token function">git</span> reset --hard ^HEAD <span class="token comment"># 版本回退</span>\n$ <span class="token function">git</span> checkout -- <span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token comment"># 撤销修改</span>\n$ <span class="token function">git</span> stash <span class="token comment"># 暂存修改</span>\n$ <span class="token function">git</span> stash apply <span class="token comment"># 恢复修改</span>\n</code></pre></div><div class="language-bash"><pre><code>$ <span class="token function">git</span> push origin dev -f <span class="token comment"># 使用--force来强制push，但你要清楚这可能会导致你的一些commit记录的丢失，所以请仅在个人分支进行该操作</span>\n</code></pre></div>',35);s.render=function(n,t,s,o,c,l){return e(),a("div",null,[i])};export default s;export{t as __pageData};
