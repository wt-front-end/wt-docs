import{o as s,c as a,b as n}from"./app.0e604d2f.js";const p='{"title":"Vue 规范","description":"","frontmatter":{"title":"Vue 规范"},"headers":[{"level":2,"title":"命名规范","slug":"命名规范"},{"level":3,"title":"组件","slug":"组件"},{"level":3,"title":"method方法命名","slug":"method方法命名"},{"level":3,"title":"views下文件命名","slug":"views下文件命名"},{"level":3,"title":"props 命名","slug":"props-命名"},{"level":2,"title":"目录文件夹及子文件规范","slug":"目录文件夹及子文件规范"},{"level":2,"title":"多个特性的元素规范","slug":"多个特性的元素规范"},{"level":3,"title":"元素特性顺序","slug":"元素特性顺序"},{"level":3,"title":"组件选项顺序","slug":"组件选项顺序"},{"level":2,"title":"注释规范","slug":"注释规范"},{"level":3,"title":"注释列表","slug":"注释列表"},{"level":3,"title":"单行注释","slug":"单行注释"},{"level":3,"title":"多行注释","slug":"多行注释"},{"level":2,"title":"编码规范","slug":"编码规范"},{"level":3,"title":"源码风格","slug":"源码风格"},{"level":3,"title":"模块","slug":"模块"},{"level":3,"title":"指令规范","slug":"指令规范"},{"level":2,"title":"Props 规范","slug":"props-规范"},{"level":2,"title":"特殊规范","slug":"特殊规范"}],"relativePath":"vue/index.md","lastUpdated":1630313524932}',t={},o=n('<h1 id="vue-规范"><a class="header-anchor" href="#vue-规范" aria-hidden="true">#</a> Vue 规范</h1><h2 id="命名规范"><a class="header-anchor" href="#命名规范" aria-hidden="true">#</a> 命名规范</h2><ul><li>普通变量</li></ul><blockquote><p>方法:驼峰命名</p></blockquote><div class="tip custom-block"><p class="custom-block-title">说明</p><p>规范 跟需求的内容相关 复数的时候需要加s 方法:全部大写 规范:使用大写字母和下划线来组合命名，下划线分割单词</p></div><h3 id="组件"><a class="header-anchor" href="#组件" aria-hidden="true">#</a> 组件</h3><p>官方文档推荐及使用遵循规则:</p><div class="language-js"><pre><code><span class="token function">PascalCase</span> <span class="token punctuation">(</span>单词首字母大写命名<span class="token punctuation">)</span>是最通用的声明约定\nkebab<span class="token operator">-</span><span class="token keyword">case</span> <span class="token punctuation">(</span>短横线分隔命名<span class="token punctuation">)</span> 是最通用的使用约定 \n组件名应该始终是多个单词的，根组件 App 除外\n有意义的名词、简短、具有可读性\n命名遵循 PascalCase 约定 \n公用组件以 <span class="token function">Abcd</span> <span class="token punctuation">(</span>公司名缩写简称<span class="token punctuation">)</span> 开头，如（AbcdDatePicker<span class="token punctuation">,</span>AbcdTable）\n页面内部组件以组件模块名简写为开头，Item 为结尾，如（StaffBenchToChargeItem，StaffBenchAppNotArrItem）\n使用遵循 kebab<span class="token operator">-</span><span class="token keyword">case</span> 约定 \n在页面中使用组件需要前后闭合，并以短线分隔，如（，）\n导入及注册组件时，遵循 PascalCase 约定\n同时注意<span class="token operator">:</span>必须符合自定义元素规范<span class="token operator">:</span>切勿使用保留字\n</code></pre></div><h3 id="method方法命名"><a class="header-anchor" href="#method方法命名" aria-hidden="true">#</a> method方法命名</h3><ul><li>驼峰式命名，统一使用动词或者动词+名词形式</li></ul><div class="language-js"><pre><code><span class="token comment">//bad</span>\ngo、nextPage、show、open、login\n\n  <span class="token comment">// good</span>\njumpPage、openCarInfoDialog\n请求数据方法，以 data 结尾\n<span class="token comment">//bad</span>\ntakeData、confirmData、getList、postForm\n\n<span class="token comment">// good</span>\ngetListData、postFormData\ninit、refresh 单词除外\n尽量使用常用单词开头（<span class="token keyword">set</span>、<span class="token keyword">get</span>、go、can、has、is）\n 常用的动词<span class="token keyword">get</span> 获取<span class="token operator">/</span><span class="token keyword">set</span> 设置<span class="token punctuation">,</span> add 增加<span class="token operator">/</span>remove 删除 create 创建<span class="token operator">/</span>destory 移除 start 启动<span class="token operator">/</span>stop 停止 open 打开<span class="token operator">/</span>close 关闭<span class="token punctuation">,</span> read 读取<span class="token operator">/</span>write 写入 load 载入<span class="token operator">/</span>save 保存<span class="token punctuation">,</span> create 创建<span class="token operator">/</span>destroy 销毁 begin 开始<span class="token operator">/</span>end 结束<span class="token punctuation">,</span> backup 备份<span class="token operator">/</span>restore 恢复 <span class="token keyword">import</span> 导入<span class="token operator">/</span><span class="token keyword">export</span> 导出<span class="token punctuation">,</span> split 分割<span class="token operator">/</span>merge 合并 inject 注入<span class="token operator">/</span>extract 提取<span class="token punctuation">,</span> attach 附着<span class="token operator">/</span>detach 脱离 bind 绑定<span class="token operator">/</span>separate 分离<span class="token punctuation">,</span> view 查看<span class="token operator">/</span>browse 浏览 edit 编辑<span class="token operator">/</span>modify 修改<span class="token punctuation">,</span> select 选取<span class="token operator">/</span>mark 标记 copy 复制<span class="token operator">/</span>paste 粘贴<span class="token punctuation">,</span> undo 撤销<span class="token operator">/</span>redo 重做 insert 插入<span class="token operator">/</span><span class="token keyword">delete</span> 移除<span class="token punctuation">,</span> add 加入<span class="token operator">/</span>append 添加 clean 清理<span class="token operator">/</span>clear 清除<span class="token punctuation">,</span> index 索引<span class="token operator">/</span>sort 排序 find 查找<span class="token operator">/</span>search 搜索<span class="token punctuation">,</span> increase 增加<span class="token operator">/</span>decrease 减少 play 播放<span class="token operator">/</span>pause 暂停<span class="token punctuation">,</span> launch 启动<span class="token operator">/</span>run 运行 compile 编译<span class="token operator">/</span>execute 执行<span class="token punctuation">,</span> debug 调试<span class="token operator">/</span>trace 跟踪 observe 观察<span class="token operator">/</span>listen 监听<span class="token punctuation">,</span> build 构建<span class="token operator">/</span>publish 发布 input 输入<span class="token operator">/</span>output 输出<span class="token punctuation">,</span> encode 编码<span class="token operator">/</span>decode 解码 encrypt 加密<span class="token operator">/</span>decrypt 解密<span class="token punctuation">,</span> compress 压缩<span class="token operator">/</span>decompress 解压缩 pack 打包<span class="token operator">/</span>unpack 解包<span class="token punctuation">,</span> parse 解析<span class="token operator">/</span>emit 生成 connect 连接<span class="token operator">/</span>disconnect 断开<span class="token punctuation">,</span> send 发送<span class="token operator">/</span>receive 接收 download 下载<span class="token operator">/</span>upload 上传<span class="token punctuation">,</span> refresh 刷新<span class="token operator">/</span>synchronize 同步 update 更新<span class="token operator">/</span>revert 复原<span class="token punctuation">,</span> lock 锁定<span class="token operator">/</span>unlock 解锁 check out 签出<span class="token operator">/</span>check <span class="token keyword">in</span> 签入<span class="token punctuation">,</span> submit 提交<span class="token operator">/</span>commit 交付 push 推<span class="token operator">/</span>pull 拉<span class="token punctuation">,</span> expand 展开<span class="token operator">/</span>collapse 折叠 begin 起始<span class="token operator">/</span>end 结束<span class="token punctuation">,</span> start 开始<span class="token operator">/</span>finish 完成 enter 进入<span class="token operator">/</span>exit 退出<span class="token punctuation">,</span> abort 放弃<span class="token operator">/</span>quit 离开 obsolete 废弃<span class="token operator">/</span>depreciate 废旧<span class="token punctuation">,</span> collect 收集<span class="token operator">/</span>aggregate 聚集\n</code></pre></div><h3 id="views下文件命名"><a class="header-anchor" href="#views下文件命名" aria-hidden="true">#</a> views下文件命名</h3><blockquote><p>只有一个文件的情况下不会出现文件夹，而是直接放在 views 目录下面，如 index.vue尽量是名词,且使用驼峰命名法开头的单词就是所属模块名字（workbenchIndex、workbenchList、workbenchEdit）名字至少两个单词（good: workbenchIndex）（bad:workbench）</p></blockquote><h3 id="props-命名"><a class="header-anchor" href="#props-命名" aria-hidden="true">#</a> props 命名</h3><ul><li>应该始终使用 camelCase，而在模板中应该始终使用 kebab-case</li></ul><div class="language-js"><pre><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> bad <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\nprops<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;greeting-text&#39;</span><span class="token operator">:</span> String\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n \n<span class="token operator">&lt;</span>welcome<span class="token operator">-</span>message greetingText<span class="token operator">=</span><span class="token string">&quot;hi&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>welcome<span class="token operator">-</span>message<span class="token operator">&gt;</span>\n \n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> good <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\nprops<span class="token operator">:</span> <span class="token punctuation">{</span>\n  greetingText<span class="token operator">:</span> String\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>welcome<span class="token operator">-</span>message greeting<span class="token operator">-</span>text<span class="token operator">=</span><span class="token string">&quot;hi&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>welcome<span class="token operator">-</span>message<span class="token operator">&gt;</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">例外</p><p>作用域不大临时变量可以简写，比如：str，num，bol，obj，fun，arr。 循环变量可以简写，比如：i，j，k 等</p></div><h2 id="目录文件夹及子文件规范"><a class="header-anchor" href="#目录文件夹及子文件规范" aria-hidden="true">#</a> 目录文件夹及子文件规范</h2><ul><li>以下统一管理处均对应相应模块以下全局文件文件均以 index.js 导出，并在 main.js 中导入以下临时文件，在使用后，接口已经有了，发版后清除</li></ul><div class="language-js"><pre><code>src                               源码目录\n<span class="token operator">|</span><span class="token operator">--</span> api                              接口，统一管理\n<span class="token operator">|</span><span class="token operator">--</span> assets                           静态资源，统一管理\n<span class="token operator">|</span><span class="token operator">--</span> components                       公用组件，全局文件\n<span class="token operator">|</span><span class="token operator">--</span> filters                          过滤器，全局工具\n<span class="token operator">|</span><span class="token operator">--</span> icons                            图标，全局资源\n<span class="token operator">|</span><span class="token operator">--</span> datas                            模拟数据，临时存放\n<span class="token operator">|</span><span class="token operator">--</span> lib                              外部引用的插件存放及修改文件\n<span class="token operator">|</span><span class="token operator">--</span> mock                             模拟接口，临时存放\n<span class="token operator">|</span><span class="token operator">--</span> router                           路由，统一管理\n<span class="token operator">|</span><span class="token operator">--</span> store                            vuex<span class="token punctuation">,</span> 统一管理\n<span class="token operator">|</span><span class="token operator">--</span> views                         视图目录\n<span class="token operator">|</span>   <span class="token operator">|</span><span class="token operator">--</span> staffWorkbench               视图模块名\n<span class="token operator">|</span>   <span class="token operator">|</span><span class="token operator">--</span> <span class="token operator">|</span><span class="token operator">--</span> staffWorkbench<span class="token punctuation">.</span>vue       模块入口页面\n<span class="token operator">|</span>   <span class="token operator">|</span><span class="token operator">--</span> <span class="token operator">|</span><span class="token operator">--</span> indexComponents          模块页面级组件文件夹\n<span class="token operator">|</span>   <span class="token operator">|</span><span class="token operator">--</span> <span class="token operator">|</span><span class="token operator">--</span> components               模块通用组件文件夹\n# vue文件基本结构\n</code></pre></div><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!--必须在div中编写页面--&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    components <span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>，\n    methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!--声明语言，并且添加scoped--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>scss<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h2 id="多个特性的元素规范"><a class="header-anchor" href="#多个特性的元素规范" aria-hidden="true">#</a> 多个特性的元素规范</h2><p>分多行撰写，每个特性一行</p><div class="language-js"><pre><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> bad <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">&quot;https://vuejs.org/images/logo.png&quot;</span> alt<span class="token operator">=</span><span class="token string">&quot;Vue Logo&quot;</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>my<span class="token operator">-</span>component foo<span class="token operator">=</span><span class="token string">&quot;a&quot;</span> bar<span class="token operator">=</span><span class="token string">&quot;b&quot;</span> baz<span class="token operator">=</span><span class="token string">&quot;c&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>my<span class="token operator">-</span>component<span class="token operator">&gt;</span>\n \n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> good <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>img\n  src<span class="token operator">=</span><span class="token string">&quot;https://vuejs.org/images/logo.png&quot;</span>\n  alt<span class="token operator">=</span><span class="token string">&quot;Vue Logo&quot;</span>\n<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>my<span class="token operator">-</span>component\n  foo<span class="token operator">=</span><span class="token string">&quot;a&quot;</span>\n  bar<span class="token operator">=</span><span class="token string">&quot;b&quot;</span>\n  baz<span class="token operator">=</span><span class="token string">&quot;c&quot;</span>\n<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>my<span class="token operator">-</span>component<span class="token operator">&gt;</span>\n</code></pre></div><h3 id="元素特性顺序"><a class="header-anchor" href="#元素特性顺序" aria-hidden="true">#</a> 元素特性顺序</h3><ul><li><p>原生在前,指令在后</p></li><li><p>class</p></li><li><p>id,ref</p></li><li><p>name</p></li><li><p>data-*</p></li><li><p>src, for, type, href,value,max-length,max,min,pattern</p></li><li><p>title, alt，placeholder</p></li><li><p>aria-*, role</p></li><li><p>required,readonly,disabled</p></li><li><p>is</p></li><li><p>v-for</p></li><li><p>key</p></li><li><p>v-if</p></li><li><p>v-else-if</p></li><li><p>v-else</p></li><li><p>v-show</p></li><li><p>v-cloak</p></li><li><p>v-pre</p></li><li><p>v-once</p></li><li><p>v-model</p></li><li><p>v-bind,:</p></li><li><p>v-on,@</p></li><li><p>v-html</p></li><li><p>v-text</p></li></ul><h3 id="组件选项顺序"><a class="header-anchor" href="#组件选项顺序" aria-hidden="true">#</a> 组件选项顺序</h3><ul><li>components</li><li>props</li><li>data</li><li>computed</li><li>created</li><li>mounted</li><li>metods</li><li>filter</li><li>watch</li></ul><h2 id="注释规范"><a class="header-anchor" href="#注释规范" aria-hidden="true">#</a> 注释规范</h2><h3 id="注释列表"><a class="header-anchor" href="#注释列表" aria-hidden="true">#</a> 注释列表</h3><ul><li>公共组件使用说明 各组件中重要函数或者类说明 复杂的业务逻辑处理说明 特殊情况的代码处理说明,对于代码中特殊用途的变量、存在临界值、函数中使用的 hack、使用了某种算法或思路等需要进行注释描述 多重 if 判断语句 注释块必须以/<strong>（至少两个星号）开头</strong>/ 单行注释使用//</li></ul><h3 id="单行注释"><a class="header-anchor" href="#单行注释" aria-hidden="true">#</a> 单行注释</h3><p>不要在代码后的同一行内加注释</p><div class="language-js"><pre><code>bad\n\n<span class="token keyword">var</span> name <span class="token operator">=</span>”abc”<span class="token punctuation">;</span> <span class="token comment">// 姓名</span>\n\ngood\n\n<span class="token comment">// 姓名</span>\n<span class="token keyword">var</span> name <span class="token operator">=</span> “abc”<span class="token punctuation">;</span>\n</code></pre></div><h3 id="多行注释"><a class="header-anchor" href="#多行注释" aria-hidden="true">#</a> 多行注释</h3><p>组件使用说明，和调用说明</p><div class="language-js"><pre><code><span class="token comment">/**\n* 组件名称\n* @module 组件存放位置\n* @desc 组件描述\n* @author 组件作者\n* @date 2020年03月27日12:22:43\n* @param {Object} [title]    - 参数说明\n* @param {String} [columns] - 参数说明\n* @example 调用示例\n*  &lt;hbTable :title=&quot;title&quot; :columns=&quot;columns&quot; :tableData=&quot;tableData&quot;&gt;&lt;/hbTable&gt;\n**/</span>\n</code></pre></div><h2 id="编码规范"><a class="header-anchor" href="#编码规范" aria-hidden="true">#</a> 编码规范</h2><h3 id="源码风格"><a class="header-anchor" href="#源码风格" aria-hidden="true">#</a> 源码风格</h3><ul><li>使用 ES6 风格编码</li></ul><div class="language-js"><pre><code>定义变量使用 <span class="token keyword">let</span> <span class="token punctuation">,</span>定义常量使用 <span class="token keyword">const</span>\n静态字符串一律使用单引号或反引号，动态字符串使用反引号\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;foobar&#39;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">&#39;bar&#39;</span>\n\n<span class="token comment">// acceptable</span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">foobar</span><span class="token template-punctuation string">`</span></span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;foobar&#39;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">foo</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">bar</span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token string">&#39;foobar&#39;</span>\n</code></pre></div><ul><li>解构赋值</li></ul><blockquote><p>数组成员对变量赋值时，优先使用解构赋值</p></blockquote><div class="language-js"><pre><code> <span class="token comment">// 数组解构赋值 const arr = [1, 2, 3, 4] // bad const first = arr[0] const second = arr[1]  // good const [first, second] = arr</span>\n</code></pre></div><blockquote><p>函数的参数如果是对象的成员，优先使用解构赋值</p></blockquote><div class="language-js"><pre><code> <span class="token comment">// 对象解构赋值 // bad function getFullName(user) {   const firstName = user.firstName   const lastName = user.lastName }  // good function getFullName(obj) {   const { firstName, lastName } = obj }  // best function getFullName({ firstName, lastName }) {}</span>\n</code></pre></div><ul><li>拷贝数组:用扩展运算符（...）拷贝数组</li></ul><div class="language-js"><pre><code> <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>  <span class="token comment">// bad const itemsCopy = items  // good const itemsCopy = [...items]</span>\n</code></pre></div><ul><li>箭头函数(需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了 this)</li></ul><div class="language-js"><pre><code> <span class="token comment">// bad const self = this; const boundMethod = function(...params) {   return method.apply(self, params); }  // acceptable const boundMethod = method.bind(this);  // best const boundMethod = (...params) =&gt; method.apply(this, params);</span>\n</code></pre></div><h3 id="模块"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h3><ul><li>如果模块只有一个输出值，就使用 export default，如果模块有多个输出值，就不使用 export default，export default 与普通的 export 不要同时使用</li></ul><div class="language-js"><pre><code><span class="token comment">// bad import * as myObject from &#39;./importModule&#39;  // good import myObject from &#39;./importModule&#39;</span>\n</code></pre></div><ul><li>如果模块默认输出一个函数，函数名的首字母应该小写</li></ul><div class="language-js"><pre><code> <span class="token keyword">function</span> <span class="token function">makeStyleGuide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> makeStyleGuide<span class="token punctuation">;</span>\n</code></pre></div><ul><li>如果模块默认输出一个对象，对象名的首字母应该大写</li></ul><div class="language-js"><pre><code> <span class="token keyword">const</span> StyleGuide <span class="token operator">=</span> <span class="token punctuation">{</span>   es6<span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> StyleGuide<span class="token punctuation">;</span>\n</code></pre></div><h3 id="指令规范"><a class="header-anchor" href="#指令规范" aria-hidden="true">#</a> 指令规范</h3><ul><li>有缩写一律采用缩写</li></ul><div class="language-js"><pre><code><span class="token comment">// bad</span>\nv<span class="token operator">-</span>bind<span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;{&#39;show-left&#39;：true}&quot;</span>\nv<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">&quot;getListData&quot;</span>\n\n<span class="token comment">// good</span>\n<span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;{&#39;show-left&#39;：true}&quot;</span>\n@click<span class="token operator">=</span><span class="token string">&quot;getListData&quot;</span>\n</code></pre></div><ul><li>v-for 循环必须加上 key 属性，在整个 for 循环中 key 需要唯一</li></ul><div class="language-js"><pre><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> good <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;todo in todos&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;todo.id&quot;</span><span class="token operator">&gt;</span>\n    <span class="token punctuation">{</span><span class="token punctuation">{</span> todo<span class="token punctuation">.</span>text <span class="token punctuation">}</span><span class="token punctuation">}</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>\n\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> bad <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;todo in todos&quot;</span><span class="token operator">&gt;</span>\n    <span class="token punctuation">{</span><span class="token punctuation">{</span> todo<span class="token punctuation">.</span>text <span class="token punctuation">}</span><span class="token punctuation">}</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>\n</code></pre></div><ul><li>避免 v-if 和 v-for 同时用在一个元素上（性能问题）</li></ul><div class="language-js"><pre><code>将数据替换为一个计算属性，让其返回过滤后的列表<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> bad <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;user in users&quot;</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;user.isActive&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;user.id&quot;</span><span class="token operator">&gt;</span>     <span class="token punctuation">{</span><span class="token punctuation">{</span> user<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> good <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;user in activeUsers&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;user.id&quot;</span><span class="token operator">&gt;</span>     <span class="token punctuation">{</span><span class="token punctuation">{</span> user<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span> computed<span class="token operator">:</span> <span class="token punctuation">{</span>   <span class="token function-variable function">activeUsers</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> user<span class="token punctuation">.</span>isActive     <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n将 v<span class="token operator">-</span><span class="token keyword">if</span> <span class="token function">移动至容器元素上</span> <span class="token punctuation">(</span>比如 ul<span class="token punctuation">,</span> ol<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> bad <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;user in users&quot;</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;shouldShowUsers&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;user.id&quot;</span><span class="token operator">&gt;</span>     <span class="token punctuation">{</span><span class="token punctuation">{</span> user<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> good <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>ul v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;shouldShowUsers&quot;</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;user in users&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;user.id&quot;</span><span class="token operator">&gt;</span>     <span class="token punctuation">{</span><span class="token punctuation">{</span> user<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>\n</code></pre></div><h2 id="props-规范"><a class="header-anchor" href="#props-规范" aria-hidden="true">#</a> Props 规范</h2><ul><li>定义应尽量详细</li></ul><div class="language-js"><pre><code><span class="token comment">// bad 这样做只有开发原型系统时可以接受</span>\nprops<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">]</span>\n \n<span class="token comment">// good</span>\nprops<span class="token operator">:</span> <span class="token punctuation">{</span>\n  status<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> String<span class="token punctuation">,</span>\n    required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">validator</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">[</span>\n        <span class="token string">&#39;syncing&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;synced&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;version-conflict&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;error&#39;</span>\n      <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">说明</p><p>避免 this.$parent 调试信息 console.log() debugger 使用完及时删除 除了三目运算，if,else 等禁止简写</p></div><div class="language-js"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="特殊规范"><a class="header-anchor" href="#特殊规范" aria-hidden="true">#</a> 特殊规范</h2><ul><li>对用页面级组件样式，应该是有作用域的</li><li>对于公用组件或者全局组件库，我们应该更倾向于选用基于 class 的 BEM 策略</li></ul><div class="language-js"><pre><code><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">&#39;scss&#39;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span> <span class="token comment">// bad</span>\n\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用 scoped 作用域 <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">&#39;scss&#39;</span> scoped<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span> <span class="token comment">// good</span>\n\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用 <span class="token constant">BEM</span> 约定 <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>style<span class="token operator">&gt;</span> <span class="token comment">// good</span>\n<span class="token punctuation">.</span>c<span class="token operator">-</span>Button <span class="token punctuation">{</span>\n  border<span class="token operator">:</span> none<span class="token punctuation">;</span>\n  border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">.</span>c<span class="token operator">-</span>Button<span class="token operator">--</span>close <span class="token punctuation">{</span>\n  background<span class="token operator">-</span>color<span class="token operator">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>\n</code></pre></div>',72);t.render=function(n,p,t,e,c,l){return s(),a("div",null,[o])};export default t;export{p as __pageData};
